var pages = [{"name":"class DiscardAfterDisposeConnectable<I, O>(actual: Connectable<I, O>) : Connectable<I, O> ","description":"kt.mobius.flow.DiscardAfterDisposeConnectable","location":"mobiuskt-coroutines/kt.mobius.flow/-discard-after-dispose-connectable/index.html","searchKeys":["DiscardAfterDisposeConnectable","class DiscardAfterDisposeConnectable<I, O>(actual: Connectable<I, O>) : Connectable<I, O> "]},{"name":"fun <I, O> DiscardAfterDisposeConnectable(actual: Connectable<I, O>)","description":"kt.mobius.flow.DiscardAfterDisposeConnectable.DiscardAfterDisposeConnectable","location":"mobiuskt-coroutines/kt.mobius.flow/-discard-after-dispose-connectable/-discard-after-dispose-connectable.html","searchKeys":["DiscardAfterDisposeConnectable","fun <I, O> DiscardAfterDisposeConnectable(actual: Connectable<I, O>)"]},{"name":"open override fun connect(output: Consumer<O>): Connection<I>","description":"kt.mobius.flow.DiscardAfterDisposeConnectable.connect","location":"mobiuskt-coroutines/kt.mobius.flow/-discard-after-dispose-connectable/connect.html","searchKeys":["connect","open override fun connect(output: Consumer<O>): Connection<I>"]},{"name":"class DispatcherWorkRunner(dispatcher: CoroutineDispatcher) : WorkRunner","description":"kt.mobius.flow.DispatcherWorkRunner","location":"mobiuskt-coroutines/kt.mobius.flow/-dispatcher-work-runner/index.html","searchKeys":["DispatcherWorkRunner","class DispatcherWorkRunner(dispatcher: CoroutineDispatcher) : WorkRunner"]},{"name":"fun DispatcherWorkRunner(dispatcher: CoroutineDispatcher)","description":"kt.mobius.flow.DispatcherWorkRunner.DispatcherWorkRunner","location":"mobiuskt-coroutines/kt.mobius.flow/-dispatcher-work-runner/-dispatcher-work-runner.html","searchKeys":["DispatcherWorkRunner","fun DispatcherWorkRunner(dispatcher: CoroutineDispatcher)"]},{"name":"open override fun dispose()","description":"kt.mobius.flow.DispatcherWorkRunner.dispose","location":"mobiuskt-coroutines/kt.mobius.flow/-dispatcher-work-runner/dispose.html","searchKeys":["dispose","open override fun dispose()"]},{"name":"open override fun post(runnable: Runnable)","description":"kt.mobius.flow.DispatcherWorkRunner.post","location":"mobiuskt-coroutines/kt.mobius.flow/-dispatcher-work-runner/post.html","searchKeys":["post","open override fun post(runnable: Runnable)"]},{"name":"object FlowMobius","description":"kt.mobius.flow.FlowMobius","location":"mobiuskt-coroutines/kt.mobius.flow/-flow-mobius/index.html","searchKeys":["FlowMobius","object FlowMobius"]},{"name":"fun <M, E, F> loop(update: Update<M, E, F>, effectHandler: FlowTransformer<F, E>): MobiusLoop.Builder<M, E, F>","description":"kt.mobius.flow.FlowMobius.loop","location":"mobiuskt-coroutines/kt.mobius.flow/-flow-mobius/loop.html","searchKeys":["loop","fun <M, E, F> loop(update: Update<M, E, F>, effectHandler: FlowTransformer<F, E>): MobiusLoop.Builder<M, E, F>"]},{"name":"fun <M, E, F> loopFrom(loopFactory: MobiusLoop.Factory<M, E, F>, startModel: M): FlowTransformer<E, M>","description":"kt.mobius.flow.FlowMobius.loopFrom","location":"mobiuskt-coroutines/kt.mobius.flow/-flow-mobius/loop-from.html","searchKeys":["loopFrom","fun <M, E, F> loopFrom(loopFactory: MobiusLoop.Factory<M, E, F>, startModel: M): FlowTransformer<E, M>"]},{"name":"class MobiusEffectRouter<F : Any, E>(effectClasses: Set<Class<*>>, effectPerformers: List<FlowTransformer<F, E>>) : Function1<input: Flow<F>, Flow<E>> ","description":"kt.mobius.flow.MobiusEffectRouter","location":"mobiuskt-coroutines/kt.mobius.flow/-mobius-effect-router/index.html","searchKeys":["MobiusEffectRouter","class MobiusEffectRouter<F : Any, E>(effectClasses: Set<Class<*>>, effectPerformers: List<FlowTransformer<F, E>>) : Function1<input: Flow<F>, Flow<E>> "]},{"name":"fun MobiusEffectRouter(effectClasses: Set<Class<*>>, effectPerformers: List<FlowTransformer<F, E>>)","description":"kt.mobius.flow.MobiusEffectRouter.MobiusEffectRouter","location":"mobiuskt-coroutines/kt.mobius.flow/-mobius-effect-router/-mobius-effect-router.html","searchKeys":["MobiusEffectRouter","fun MobiusEffectRouter(effectClasses: Set<Class<*>>, effectPerformers: List<FlowTransformer<F, E>>)"]},{"name":"open operator override fun invoke(effects: Flow<F>): Flow<E>","description":"kt.mobius.flow.MobiusEffectRouter.invoke","location":"mobiuskt-coroutines/kt.mobius.flow/-mobius-effect-router/invoke.html","searchKeys":["invoke","open operator override fun invoke(effects: Flow<F>): Flow<E>"]},{"name":"class SubtypeEffectHandlerBuilder<F : Any, E>","description":"kt.mobius.flow.SubtypeEffectHandlerBuilder","location":"mobiuskt-coroutines/kt.mobius.flow/-subtype-effect-handler-builder/index.html","searchKeys":["SubtypeEffectHandlerBuilder","class SubtypeEffectHandlerBuilder<F : Any, E>"]},{"name":"fun SubtypeEffectHandlerBuilder()","description":"kt.mobius.flow.SubtypeEffectHandlerBuilder.SubtypeEffectHandlerBuilder","location":"mobiuskt-coroutines/kt.mobius.flow/-subtype-effect-handler-builder/-subtype-effect-handler-builder.html","searchKeys":["SubtypeEffectHandlerBuilder","fun SubtypeEffectHandlerBuilder()"]},{"name":"inline fun <G : F> addActionSync(dispatcher: CoroutineDispatcher = Dispatchers.Default, crossinline effectHandler: () -> Unit): SubtypeEffectHandlerBuilder<F, E>","description":"kt.mobius.flow.SubtypeEffectHandlerBuilder.addActionSync","location":"mobiuskt-coroutines/kt.mobius.flow/-subtype-effect-handler-builder/add-action-sync.html","searchKeys":["addActionSync","inline fun <G : F> addActionSync(dispatcher: CoroutineDispatcher = Dispatchers.Default, crossinline effectHandler: () -> Unit): SubtypeEffectHandlerBuilder<F, E>"]},{"name":"inline fun <G : F> addConsumerSync(dispatcher: CoroutineDispatcher = Dispatchers.Default, crossinline effectHandler: (G) -> Unit): SubtypeEffectHandlerBuilder<F, E>","description":"kt.mobius.flow.SubtypeEffectHandlerBuilder.addConsumerSync","location":"mobiuskt-coroutines/kt.mobius.flow/-subtype-effect-handler-builder/add-consumer-sync.html","searchKeys":["addConsumerSync","inline fun <G : F> addConsumerSync(dispatcher: CoroutineDispatcher = Dispatchers.Default, crossinline effectHandler: (G) -> Unit): SubtypeEffectHandlerBuilder<F, E>"]},{"name":"inline fun <G : F> addFunctionSync(dispatcher: CoroutineDispatcher = Dispatchers.Default, crossinline effectHandler: (G) -> E): SubtypeEffectHandlerBuilder<F, E>","description":"kt.mobius.flow.SubtypeEffectHandlerBuilder.addFunctionSync","location":"mobiuskt-coroutines/kt.mobius.flow/-subtype-effect-handler-builder/add-function-sync.html","searchKeys":["addFunctionSync","inline fun <G : F> addFunctionSync(dispatcher: CoroutineDispatcher = Dispatchers.Default, crossinline effectHandler: (G) -> E): SubtypeEffectHandlerBuilder<F, E>"]},{"name":"inline fun <G : F> addLatestValueCollector(noinline effectHandler: suspend FlowCollector<E>.(G) -> Unit): SubtypeEffectHandlerBuilder<F, E>","description":"kt.mobius.flow.SubtypeEffectHandlerBuilder.addLatestValueCollector","location":"mobiuskt-coroutines/kt.mobius.flow/-subtype-effect-handler-builder/add-latest-value-collector.html","searchKeys":["addLatestValueCollector","inline fun <G : F> addLatestValueCollector(noinline effectHandler: suspend FlowCollector<E>.(G) -> Unit): SubtypeEffectHandlerBuilder<F, E>"]},{"name":"inline fun <G : F> addValueCollector(noinline effectHandler: suspend FlowCollector<E>.(G) -> Unit): SubtypeEffectHandlerBuilder<F, E>","description":"kt.mobius.flow.SubtypeEffectHandlerBuilder.addValueCollector","location":"mobiuskt-coroutines/kt.mobius.flow/-subtype-effect-handler-builder/add-value-collector.html","searchKeys":["addValueCollector","inline fun <G : F> addValueCollector(noinline effectHandler: suspend FlowCollector<E>.(G) -> Unit): SubtypeEffectHandlerBuilder<F, E>"]},{"name":"fun build(): FlowTransformer<F, E>","description":"kt.mobius.flow.SubtypeEffectHandlerBuilder.build","location":"mobiuskt-coroutines/kt.mobius.flow/-subtype-effect-handler-builder/build.html","searchKeys":["build","fun build(): FlowTransformer<F, E>"]},{"name":"data class UnknownEffectException(effect: Any) : RuntimeException","description":"kt.mobius.flow.UnknownEffectException","location":"mobiuskt-coroutines/kt.mobius.flow/-unknown-effect-exception/index.html","searchKeys":["UnknownEffectException","data class UnknownEffectException(effect: Any) : RuntimeException"]},{"name":"fun UnknownEffectException(effect: Any)","description":"kt.mobius.flow.UnknownEffectException.UnknownEffectException","location":"mobiuskt-coroutines/kt.mobius.flow/-unknown-effect-exception/-unknown-effect-exception.html","searchKeys":["UnknownEffectException","fun UnknownEffectException(effect: Any)"]},{"name":"operator fun component1(): Any","description":"kt.mobius.flow.UnknownEffectException.component1","location":"mobiuskt-coroutines/kt.mobius.flow/-unknown-effect-exception/component1.html","searchKeys":["component1","operator fun component1(): Any"]},{"name":"fun copy(effect: Any): UnknownEffectException","description":"kt.mobius.flow.UnknownEffectException.copy","location":"mobiuskt-coroutines/kt.mobius.flow/-unknown-effect-exception/copy.html","searchKeys":["copy","fun copy(effect: Any): UnknownEffectException"]},{"name":"val effect: Any","description":"kt.mobius.flow.UnknownEffectException.effect","location":"mobiuskt-coroutines/kt.mobius.flow/-unknown-effect-exception/effect.html","searchKeys":["effect","val effect: Any"]},{"name":"open override val message: String","description":"kt.mobius.flow.UnknownEffectException.message","location":"mobiuskt-coroutines/kt.mobius.flow/-unknown-effect-exception/message.html","searchKeys":["message","open override val message: String"]},{"name":"class UnrecoverableIncomingException(cause: Throwable?) : RuntimeException","description":"kt.mobius.flow.UnrecoverableIncomingException","location":"mobiuskt-coroutines/kt.mobius.flow/-unrecoverable-incoming-exception/index.html","searchKeys":["UnrecoverableIncomingException","class UnrecoverableIncomingException(cause: Throwable?) : RuntimeException"]},{"name":"fun UnrecoverableIncomingException(cause: Throwable?)","description":"kt.mobius.flow.UnrecoverableIncomingException.UnrecoverableIncomingException","location":"mobiuskt-coroutines/kt.mobius.flow/-unrecoverable-incoming-exception/-unrecoverable-incoming-exception.html","searchKeys":["UnrecoverableIncomingException","fun UnrecoverableIncomingException(cause: Throwable?)"]},{"name":"open override val cause: Throwable?","description":"kt.mobius.flow.UnrecoverableIncomingException.cause","location":"mobiuskt-coroutines/kt.mobius.flow/-unrecoverable-incoming-exception/cause.html","searchKeys":["cause","open override val cause: Throwable?"]},{"name":"fun <I, O> FlowTransformer<I, O>.asConnectable(): Connectable<I, O>","description":"kt.mobius.flow.asConnectable","location":"mobiuskt-coroutines/kt.mobius.flow/as-connectable.html","searchKeys":["asConnectable","fun <I, O> FlowTransformer<I, O>.asConnectable(): Connectable<I, O>"]},{"name":"fun <I, O> flowConnectable(transform: FlowTransformer<I, O>): Connectable<I, O>","description":"kt.mobius.flow.flowConnectable","location":"mobiuskt-coroutines/kt.mobius.flow/flow-connectable.html","searchKeys":["flowConnectable","fun <I, O> flowConnectable(transform: FlowTransformer<I, O>): Connectable<I, O>"]},{"name":"fun <I, O> flowTransformer(transformer: FlowTransformer<I, O>): FlowTransformer<I, O>","description":"kt.mobius.flow.flowTransformer","location":"mobiuskt-coroutines/kt.mobius.flow/flow-transformer.html","searchKeys":["flowTransformer","fun <I, O> flowTransformer(transformer: FlowTransformer<I, O>): FlowTransformer<I, O>"]},{"name":"fun <F : Any, E> subtypeEffectHandler(block: SubtypeEffectHandlerBuilder<F, E>.() -> Unit): FlowTransformer<F, E>","description":"kt.mobius.flow.subtypeEffectHandler","location":"mobiuskt-coroutines/kt.mobius.flow/subtype-effect-handler.html","searchKeys":["subtypeEffectHandler","fun <F : Any, E> subtypeEffectHandler(block: SubtypeEffectHandlerBuilder<F, E>.() -> Unit): FlowTransformer<F, E>"]},{"name":"fun <E> Flow<E>.toEventSource(scope: CoroutineScope): EventSource<E>","description":"kt.mobius.flow.toEventSource","location":"mobiuskt-coroutines/kt.mobius.flow/to-event-source.html","searchKeys":["toEventSource","fun <E> Flow<E>.toEventSource(scope: CoroutineScope): EventSource<E>"]},{"name":"fun <E> EventSource<E>.toFlow(): Flow<E>","description":"kt.mobius.flow.toFlow","location":"mobiuskt-coroutines/kt.mobius.flow/to-flow.html","searchKeys":["toFlow","fun <E> EventSource<E>.toFlow(): Flow<E>"]},{"name":"fun <I, O> Flow<I>.transform(connectable: Connectable<I, O>): Flow<O>","description":"kt.mobius.flow.transform","location":"mobiuskt-coroutines/kt.mobius.flow/transform.html","searchKeys":["transform","fun <I, O> Flow<I>.transform(connectable: Connectable<I, O>): Flow<O>"]}]
